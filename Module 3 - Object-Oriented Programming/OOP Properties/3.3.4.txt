1. An instance variable is a property whose existence depends on the creation of an object. Every object can have a different set of instance variables.

Moreover, they can be freely added to and removed from objects during their lifetime. All object instance variables are stored inside a dedicated dictionary named __dict__, contained in every object separately.


2. An instance variable can be private when its name starts with __, but don't forget that such a property is still accessible from outside the class using a mangled name constructed as _ClassName__PrivatePropertyName.


3. A class variable is a property which exists in exactly one copy, and doesn't need any created object to be accessible. Such variables are not shown as __dict__ content.

All a class's class variables are stored inside a dedicated dictionary named __dict__, contained in every class separately.


4. A function named hasattr() can be used to determine if any object/class contains a specified property.

For example:


class Sample:
    gamma = 0 # Class variable.
    def __init__(self):
 
        self.alpha = 1 # Instance variable.
        self.__delta = 3 # Private instance variable.
 
 
obj = Sample()
obj.beta = 2 # Another instance variable (existing only inside the "obj" instance.)
print(obj.__dict__)
 
Incomplete  
SECTION SUMMARY
The code outputs:

{'alpha': 1, '_Sample__delta': 3, 'beta': 2}